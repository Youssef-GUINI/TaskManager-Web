// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Data;

#nullable disable

namespace TaskManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250719205214_AddUsersTable")]
    partial class AddUsersTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TaskManager.Models.TaskModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskManager.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarUrl = "/images/avatars/youssef.jpg",
                            Bio = "Chef de projet expérimenté avec 5 ans d'expérience.",
                            CreatedDate = new DateTime(2025, 7, 19, 21, 52, 13, 61, DateTimeKind.Local).AddTicks(7244),
                            Department = "IT",
                            Email = "youssef@taskmanager.com",
                            IsActive = true,
                            Name = "Youssef El Mansouri",
                            Position = "Chef de Projet"
                        },
                        new
                        {
                            Id = 2,
                            AvatarUrl = "/images/avatars/amina.jpg",
                            Bio = "Spécialiste React et Vue.js",
                            CreatedDate = new DateTime(2025, 7, 19, 21, 52, 13, 61, DateTimeKind.Local).AddTicks(7254),
                            Department = "IT",
                            Email = "amina@taskmanager.com",
                            IsActive = true,
                            Name = "Amina Benali",
                            Position = "Développeuse Frontend"
                        },
                        new
                        {
                            Id = 3,
                            AvatarUrl = "/images/avatars/hassan.jpg",
                            Bio = "Expert .NET et bases de données",
                            CreatedDate = new DateTime(2025, 7, 19, 21, 52, 13, 61, DateTimeKind.Local).AddTicks(7263),
                            Department = "IT",
                            Email = "hassan@taskmanager.com",
                            IsActive = true,
                            Name = "Hassan Idrissi",
                            Position = "Développeur Backend"
                        },
                        new
                        {
                            Id = 4,
                            AvatarUrl = "/images/avatars/fatima.jpg",
                            Bio = "Créatrice d'expériences utilisateur exceptionnelles",
                            CreatedDate = new DateTime(2025, 7, 19, 21, 52, 13, 61, DateTimeKind.Local).AddTicks(7284),
                            Department = "Design",
                            Email = "fatima@taskmanager.com",
                            IsActive = true,
                            Name = "Fatima Zahra",
                            Position = "UX Designer"
                        },
                        new
                        {
                            Id = 5,
                            AvatarUrl = "/images/avatars/mohamed.jpg",
                            Bio = "Garantit la qualité de tous nos produits",
                            CreatedDate = new DateTime(2025, 7, 19, 21, 52, 13, 61, DateTimeKind.Local).AddTicks(7292),
                            Department = "Quality",
                            Email = "mohamed@taskmanager.com",
                            IsActive = true,
                            Name = "Mohamed Alami",
                            Position = "Testeur QA"
                        });
                });

            modelBuilder.Entity("TaskManager.Models.TaskModel", b =>
                {
                    b.HasOne("TaskManager.Models.User", "AssignedToUser")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TaskManager.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedToUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("TaskManager.Models.User", b =>
                {
                    b.Navigation("AssignedTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
