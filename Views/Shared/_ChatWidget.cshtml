<style>
    .chat-widget {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .chat-toggle {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
        transition: all 0.3s ease;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }

    100% {
        transform: scale(1);
    }

    }

    .chat-toggle:hover {
        transform: scale(1.1);
        box-shadow: 0 6px 30px rgba(102, 126, 234, 0.6);
    }

    .chat-toggle.active {
        background: linear-gradient(45deg, #e74c3c, #c0392b);
        animation: none;
    }

    .chat-window-widget {
        position: absolute;
        bottom: 80px;
        right: 0;
        width: 350px;
        height: 500px;
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
        display: none;
        flex-direction: column;
        overflow: hidden;
        animation: slideInUp 0.3s ease-out;
    }

    @@keyframes slideInUp {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .widget-header {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        padding: 15px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .widget-title {
        font-size: 1rem;
        font-weight: 600;
        margin: 0;
    }

    .widget-close {
        background: none;
        border: none;
        color: white;
        font-size: 18px;
        cursor: pointer;
        padding: 5px;
        border-radius: 50%;
        transition: background 0.3s ease;
    }

        .widget-close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

    .widget-messages {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
        background: #f8f9fa;
    }

    .widget-message {
        margin-bottom: 15px;
        display: flex;
        align-items: flex-start;
        gap: 10px;
        animation: fadeIn 0.3s ease-out;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .widget-message.user {
        flex-direction: row-reverse;
    }

    .widget-avatar {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        color: white;
        flex-shrink: 0;
    }

        .widget-avatar.bot {
            background: linear-gradient(45deg, #667eea, #764ba2);
        }

        .widget-avatar.user {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
        }

    .widget-message-content {
        max-width: 70%;
        padding: 10px 15px;
        border-radius: 15px;
        font-size: 0.9rem;
        line-height: 1.4;
        word-wrap: break-word;
        white-space: pre-wrap;
    }

        .widget-message-content.bot {
            background: white;
            color: #2c3e50;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .widget-message-content.user {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

    .widget-input {
        padding: 15px;
        background: white;
        border-top: 1px solid #e9ecef;
        display: flex;
        gap: 10px;
        align-items: center;
    }

        .widget-input input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #e9ecef;
            border-radius: 20px;
            font-size: 0.9rem;
            outline: none;
            transition: border-color 0.3s ease;
        }

            .widget-input input:focus {
                border-color: #667eea;
            }

    .widget-send {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border: none;
        padding: 10px 12px;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: transform 0.2s ease;
    }

        .widget-send:hover {
            transform: scale(1.05);
        }

        .widget-send:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .widget-typing {
        display: none;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
    }

    .widget-typing-dots {
        background: white;
        padding: 10px 15px;
        border-radius: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        display: flex;
        gap: 3px;
    }

    .widget-typing-dot {
        width: 6px;
        height: 6px;
        border-radius: 50%;
        background: #667eea;
        animation: typing 1.4s infinite;
    }

        .widget-typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .widget-typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

   @@keyframes typing {
        0%, 60%, 100%

    {
        transform: translateY(0);
    }

    30% {
        transform: translateY(-5px);
    }

    }

    .widget-welcome {
        text-align: center;
        color: #7f8c8d;
        padding: 20px;
        font-size: 0.9rem;
    }

        .widget-welcome h4 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 1rem;
        }

    .notification-badge {
        position: absolute;
        top: -5px;
        right: -5px;
        background: #e74c3c;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        font-size: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        animation: bounce 1s infinite;
    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100%

    {
        transform: translateY(0);
    }

    40% {
        transform: translateY(-10px);
    }

    60% {
        transform: translateY(-5px);
    }

    }

    .widget-error {
        background: #fee;
        color: #c33;
        padding: 8px 12px;
        border-radius: 10px;
        margin: 10px 0;
        font-size: 0.8rem;
        text-align: center;
    }

    @@media (max-width: 768px) {
        .chat-widget

    {
        bottom: 15px;
        right: 15px;
    }

    .chat-window-widget {
        width: 300px;
        height: 450px;
    }

    }
</style>

<div class="chat-widget">
    <button class="chat-toggle" id="chatToggle" onclick="toggleChatWidget()">
        <span id="chatIcon">💬</span>
        <div class="notification-badge" id="notificationBadge" style="display: none;">!</div>
    </button>

    <div class="chat-window-widget" id="chatWindowWidget">
        <div class="widget-header">
            <h3 class="widget-title">⚡ Groq AI Assistant</h3>
            <button class="widget-close" onclick="toggleChatWidget()">✕</button>
        </div>

        <div class="widget-messages" id="widgetMessages">
            <div class="widget-welcome">
                <h4>Bonjour Youssef ! 👋</h4>
                <p>Je suis votre assistant <strong>Groq AI</strong> ultra-rapide. Comment puis-je vous aider aujourd'hui ?</p>
            </div>

            <div class="widget-typing" id="widgetTyping">
                <div class="widget-avatar bot">⚡</div>
                <div class="widget-typing-dots">
                    <div class="widget-typing-dot"></div>
                    <div class="widget-typing-dot"></div>
                    <div class="widget-typing-dot"></div>
                </div>
            </div>
        </div>

        <div class="widget-input">
            <input type="text" id="widgetInput" placeholder="Tapez votre message..." onkeypress="handleWidgetEnter(event)">
            <button class="widget-send" id="widgetSendBtn" onclick="sendWidgetMessage()">➤</button>
        </div>
    </div>
</div>

<script>
    // Variables globales
    let isWidgetOpen = false;
    let widgetSessionId = null;
    let isWidgetTyping = false;

    // Fonction pour basculer l'ouverture/fermeture du widget
    function toggleChatWidget() {
        const toggle = document.getElementById('chatToggle');
        const chatWindow = document.getElementById('chatWindowWidget');
        const icon = document.getElementById('chatIcon');
        const badge = document.getElementById('notificationBadge');

        isWidgetOpen = !isWidgetOpen;

        if (isWidgetOpen) {
            chatWindow.style.display = 'flex';
            toggle.classList.add('active');
            icon.textContent = '✕';
            badge.style.display = 'none';

            if (!widgetSessionId) {
                widgetSessionId = 'widget-' + Date.now();
            }

            setTimeout(() => {
                const input = document.getElementById('widgetInput');
                if (input) input.focus();
            }, 100);
        } else {
            chatWindow.style.display = 'none';
            toggle.classList.remove('active');
            icon.textContent = '💬';
        }
    }

    // Gérer Enter dans l'input
    function handleWidgetEnter(event) {
        if (event.key === 'Enter' && !event.shiftKey) {
            event.preventDefault();
            sendWidgetMessage();
        }
    }

    // ✅ FONCTION CORRIGÉE - Utilise la bonne route
    async function sendWidgetMessage() {
        const input = document.getElementById('widgetInput');
        const sendBtn = document.getElementById('widgetSendBtn');

        if (!input || !sendBtn) return;

        const message = input.value.trim();
        if (!message || isWidgetTyping) return;

        // Désactiver les contrôles
        input.disabled = true;
        sendBtn.disabled = true;

        // Ajouter le message utilisateur
        addWidgetMessage('user', message);
        input.value = '';

        // Montrer l'indicateur de frappe
        showWidgetTyping();

        try {
            console.log('🚀 Envoi message widget:', message);

            // ✅ ROUTE CORRIGÉE - Utilise SendMessage au lieu de TestMessage
            const response = await fetch('/ChatBot/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    sessionId: widgetSessionId
                })
            });

            console.log('📡 Response status:', response.status);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('📥 Response data:', data);

            if (data.success) {
                // ✅ Message de succès avec Groq
                addWidgetMessage('bot', data.message);
                console.log('✅ Message Groq reçu avec succès');
            } else {
                // ❌ Erreur de Groq
                const errorMessage = data.error || 'Groq AI temporairement indisponible';
                addWidgetMessage('bot', `❌ ${errorMessage}`);
                console.log('❌ Erreur Groq:', errorMessage);
            }

        } catch (error) {
            console.error('💥 Erreur réseau:', error);
            addWidgetMessage('bot', `💥 Erreur de connexion: ${error.message}`);
        } finally {
            // Réactiver les contrôles
            hideWidgetTyping();
            input.disabled = false;
            sendBtn.disabled = false;
            input.focus();
        }
    }

    // Ajouter un message avec support du formatage
    function addWidgetMessage(role, content) {
        const messagesContainer = document.getElementById('widgetMessages');
        const welcomeMessage = messagesContainer.querySelector('.widget-welcome');

        if (welcomeMessage) {
            welcomeMessage.style.display = 'none';
        }

        const messageDiv = document.createElement('div');
        messageDiv.className = `widget-message ${role}`;

        const avatar = document.createElement('div');
        avatar.className = `widget-avatar ${role}`;
        avatar.textContent = role === 'bot' ? '⚡' : '👤';

        const contentDiv = document.createElement('div');
        contentDiv.className = `widget-message-content ${role}`;

        // ✅ Support pour le formatage basique
        if (role === 'bot') {
            // Convertir le formatage Markdown basique en HTML
            let formattedContent = content
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // **gras**
                .replace(/\*(.*?)\*/g, '<em>$1</em>') // *italique*
                .replace(/```(.*?)```/g, '<code>$1</code>') // ```code```
                .replace(/\n/g, '<br>'); // Retours à la ligne

            contentDiv.innerHTML = formattedContent;
        } else {
            contentDiv.textContent = content;
        }

        messageDiv.appendChild(avatar);
        messageDiv.appendChild(contentDiv);

        const typingIndicator = document.getElementById('widgetTyping');
        messagesContainer.insertBefore(messageDiv, typingIndicator);

        scrollWidgetToBottom();
    }

    // Afficher l'indicateur de frappe
    function showWidgetTyping() {
        isWidgetTyping = true;
        const typing = document.getElementById('widgetTyping');
        if (typing) {
            typing.style.display = 'flex';
            scrollWidgetToBottom();
        }
    }

    // Masquer l'indicateur de frappe
    function hideWidgetTyping() {
        isWidgetTyping = false;
        const typing = document.getElementById('widgetTyping');
        if (typing) {
            typing.style.display = 'none';
        }
    }

    // Scroll vers le bas
    function scrollWidgetToBottom() {
        const messagesContainer = document.getElementById('widgetMessages');
        if (messagesContainer) {
            setTimeout(() => {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, 100);
        }
    }

    // Notification
    function showWidgetNotification() {
        if (!isWidgetOpen) {
            const badge = document.getElementById('notificationBadge');
            if (badge) {
                badge.style.display = 'flex';
                setTimeout(() => {
                    badge.style.display = 'none';
                }, 5000);
            }
        }
    }

    // ✅ Test de connexion au démarrage
    document.addEventListener('DOMContentLoaded', function() {
        console.log('🎯 Widget chat initialisé');

        // Test de connexion optionnel
        setTimeout(() => {
            console.log('🔗 Widget prêt pour les messages');
        }, 1000);
    });
</script>