@model TaskManager.Models.ChatBotViewModel

@{
    ViewData["Title"] = "Assistant IA - TaskManager";
}

<style>
    .chat-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .chat-window {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
        backdrop-filter: blur(10px);
        width: 100%;
        max-width: 900px;
        height: 80vh;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .chat-header {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        padding: 20px 25px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 20px 20px 0 0;
    }

    .chat-header-left {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .bot-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }

    100% {
        transform: scale(1);
    }

    }

    .bot-info h3 {
        margin: 0;
        font-size: 1.2rem;
        font-weight: 600;
    }

    .bot-status {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9rem;
        opacity: 0.9;
    }

    .status-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #27ae60;
        animation: blink 1.5s infinite;
    }

    @@keyframes blink {
        0%, 50%

    {
        opacity: 1;
    }

    51%, 100% {
        opacity: 0.3;
    }

    }

    .chat-controls {
        display: flex;
        gap: 10px;
    }

    .control-btn {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        color: white;
        padding: 8px 12px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 14px;
    }

        .control-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        background: #f8f9fa;
    }

    .message {
        margin-bottom: 20px;
        display: flex;
        align-items: flex-start;
        gap: 12px;
        animation: fadeInUp 0.5s ease-out;
    }

   

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .message.user {
        flex-direction: row-reverse;
    }

    .message-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 16px;
        font-weight: 600;
        color: white;
        flex-shrink: 0;
    }

        .message-avatar.bot {
            background: linear-gradient(45deg, #667eea, #764ba2);
        }

        .message-avatar.user {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
        }

    .message-content {
        max-width: 70%;
        padding: 15px 20px;
        border-radius: 18px;
        line-height: 1.5;
        position: relative;
    }

        .message-content.bot {
            background: white;
            color: #2c3e50;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #e9ecef;
        }

        .message-content.user {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

    .message-time {
        font-size: 0.75rem;
        opacity: 0.7;
        margin-top: 5px;
    }

    .typing-indicator {
        display: none;
        align-items: center;
        gap: 12px;
        margin-bottom: 20px;
    }

    .typing-dots {
        background: white;
        padding: 15px 20px;
        border-radius: 18px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        display: flex;
        gap: 4px;
        align-items: center;
    }

    .typing-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #667eea;
        animation: typing 1.4s infinite;
    }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

    /@@keyframes typing {
        0%, 60%, 100%

    {
        transform: translateY(0);
    }

    30% {
        transform: translateY(-10px);
    }

    }

    .chat-input-container {
        padding: 20px;
        background: white;
        border-radius: 0 0 20px 20px;
        border-top: 1px solid #e9ecef;
    }

    .quick-suggestions {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 15px;
    }

    .suggestion-btn {
        background: rgba(102, 126, 234, 0.1);
        color: #667eea;
        border: 1px solid rgba(102, 126, 234, 0.3);
        padding: 8px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .suggestion-btn:hover {
            background: rgba(102, 126, 234, 0.2);
            transform: translateY(-2px);
        }

    .input-group {
        display: flex;
        gap: 10px;
        align-items: flex-end;
    }

    .message-input {
        flex: 1;
        padding: 12px 16px;
        border: 2px solid #e9ecef;
        border-radius: 20px;
        resize: none;
        font-size: 1rem;
        font-family: inherit;
        transition: border-color 0.3s ease;
        min-height: 48px;
        max-height: 100px;
    }

        .message-input:focus {
            outline: none;
            border-color: #667eea;
        }

    .send-btn {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border: none;
        padding: 12px 16px;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 48px;
        height: 48px;
    }

        .send-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .send-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

    .welcome-message {
        text-align: center;
        padding: 40px 20px;
        color: #7f8c8d;
    }

        .welcome-message h4 {
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .welcome-message p {
            margin-bottom: 20px;
            line-height: 1.6;
        }

    .feature-list {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-top: 20px;
    }

    .feature-item {
        background: rgba(102, 126, 234, 0.05);
        padding: 15px;
        border-radius: 10px;
        text-align: center;
        border: 1px solid rgba(102, 126, 234, 0.1);
    }

        .feature-item i {
            font-size: 24px;
            color: #667eea;
            margin-bottom: 8px;
        }

    .back-link {
        color: white;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 16px;
        border-radius: 8px;
        transition: all 0.3s ease;
        background: rgba(255, 255, 255, 0.1);
    }

        .back-link:hover {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            text-decoration: none;
        }

    @@media (max-width: 768px) {
        .chat-container

    {
        padding: 10px;
    }

    .chat-window {
        height: 95vh;
    }

    .chat-header {
        padding: 15px 20px;
    }

    .bot-info h3 {
        font-size: 1.1rem;
    }

    .message-content {
        max-width: 85%;
    }

    .feature-list {
        grid-template-columns: 1fr;
    }

    }
</style>

<div class="chat-container">
    <div class="chat-window">
        <!-- Header -->
        <div class="chat-header">
            <div class="chat-header-left">
                <div class="bot-avatar">
                    🤖
                </div>
                <div class="bot-info">
                    <h3>Assistant IA TaskManager</h3>
                    <div class="bot-status">
                        <div class="status-indicator"></div>
                        <span>En ligne</span>
                    </div>
                </div>
            </div>
            <div class="chat-controls">
                <a href="@Url.Action("Index", "Workspace")" class="back-link">
                    <i class="fas fa-arrow-left"></i>
                    Retour
                </a>
                <button class="control-btn" onclick="clearChat()" title="Effacer la conversation">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>

        <!-- Messages -->
        <div class="chat-messages" id="chatMessages">
            <div class="welcome-message">
                <h4>👋 Bonjour @Model.UserName !</h4>
                <p>Je suis votre assistant IA intégré dans TaskManager. Je peux vous aider à gérer vos tâches, améliorer votre productivité et répondre à vos questions sur l'application.</p>

                <div class="feature-list">
                    <div class="feature-item">
                        <i class="fas fa-tasks"></i>
                        <div>Gestion des tâches</div>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-chart-line"></i>
                        <div>Conseils productivité</div>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-question-circle"></i>
                        <div>Aide application</div>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-lightbulb"></i>
                        <div>Suggestions</div>
                    </div>
                </div>
            </div>

            <!-- Typing indicator -->
            <div class="typing-indicator" id="typingIndicator">
                <div class="message-avatar bot">🤖</div>
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        </div>

        <!-- Input -->
        <div class="chat-input-container">
            <div class="quick-suggestions" id="quickSuggestions">
                <!-- Les suggestions seront chargées via JavaScript -->
            </div>

            <div class="input-group">
                <textarea id="messageInput"
                          class="message-input"
                          placeholder="Tapez votre message..."
                          rows="1"></textarea>
                <button id="sendBtn" class="send-btn" onclick="sendMessage()">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    let sessionId = '@Model.SessionId';
    let isTyping = false;

    // Initialisation
    document.addEventListener('DOMContentLoaded', function() {
        loadQuickSuggestions();
        setupEventListeners();
        focusInput();
    });

    function setupEventListeners() {
        const messageInput = document.getElementById('messageInput');
        const sendBtn = document.getElementById('sendBtn');

        // Auto-resize textarea
        messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 100) + 'px';
        });

        // Envoyer avec Enter
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Désactiver le bouton si vide
        messageInput.addEventListener('input', function() {
            sendBtn.disabled = this.value.trim() === '';
        });
    }

    function focusInput() {
        document.getElementById('messageInput').focus();
    }

    async function loadQuickSuggestions() {
        try {
            const response = await fetch('@Url.Action("GetQuickSuggestions", "ChatBot")');
            const data = await response.json();

            const suggestionsContainer = document.getElementById('quickSuggestions');
            suggestionsContainer.innerHTML = '';

            data.suggestions.forEach(suggestion => {
                const btn = document.createElement('button');
                btn.className = 'suggestion-btn';
                btn.textContent = suggestion;
                btn.onclick = () => sendSuggestion(suggestion);
                suggestionsContainer.appendChild(btn);
            });
        } catch (error) {
            console.error('Erreur lors du chargement des suggestions:', error);
        }
    }

    function sendSuggestion(suggestion) {
        document.getElementById('messageInput').value = suggestion;
        sendMessage();
    }

    async function sendMessage() {
        const messageInput = document.getElementById('messageInput');
        const message = messageInput.value.trim();

        if (!message || isTyping) return;

        // Ajouter le message utilisateur
        addMessage('user', message);
        messageInput.value = '';
        messageInput.style.height = 'auto';

        // Afficher l'indicateur de frappe
        showTypingIndicator();

        try {
            const response = await fetch('@Url.Action("SendMessage", "ChatBot")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    sessionId: sessionId
                })
            });

            const data = await response.json();

            if (data.success) {
                addMessage('bot', data.message);
            } else {
                addMessage('bot', 'Désolé, une erreur s\'est produite. Veuillez réessayer.');
            }
        } catch (error) {
            console.error('Erreur:', error);
            addMessage('bot', 'Impossible de se connecter au serveur. Vérifiez votre connexion.');
        } finally {
            hideTypingIndicator();
        }
    }

    function addMessage(role, content) {
        const messagesContainer = document.getElementById('chatMessages');
        const welcomeMessage = messagesContainer.querySelector('.welcome-message');

        // Masquer le message de bienvenue au premier message
        if (welcomeMessage) {
            welcomeMessage.style.display = 'none';
        }

        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${role}`;

        const avatar = document.createElement('div');
        avatar.className = `message-avatar ${role}`;
        avatar.textContent = role === 'bot' ? '🤖' : '👤';

        const content_div = document.createElement('div');
        content_div.className = `message-content ${role}`;
        content_div.innerHTML = formatMessage(content);

        const time = document.createElement('div');
        time.className = 'message-time';
        time.textContent = new Date().toLocaleTimeString('fr-FR', {
            hour: '2-digit',
            minute: '2-digit'
        });
        content_div.appendChild(time);

        messageDiv.appendChild(avatar);
        messageDiv.appendChild(content_div);

        messagesContainer.appendChild(messageDiv);
        scrollToBottom();
    }

    function formatMessage(content) {
        // Formatage basique pour les liens et le markdown
        return content
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/\n/g, '<br>');
    }

    function showTypingIndicator() {
        isTyping = true;
        document.getElementById('typingIndicator').style.display = 'flex';
        document.getElementById('sendBtn').disabled = true;
        scrollToBottom();
    }

    function hideTypingIndicator() {
        isTyping = false;
        document.getElementById('typingIndicator').style.display = 'none';
        document.getElementById('sendBtn').disabled = false;
    }

    function scrollToBottom() {
        const messagesContainer = document.getElementById('chatMessages');
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    async function clearChat() {
        if (confirm('Êtes-vous sûr de vouloir effacer la conversation ?')) {
            try {
                const response = await fetch('@Url.Action("ClearChat", "ChatBot")', {
                    method: 'POST'
                });

                if (response.ok) {
                    location.reload();
                }
            } catch (error) {
                console.error('Erreur lors de l\'effacement:', error);
            }
        }
    }
</script>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
}