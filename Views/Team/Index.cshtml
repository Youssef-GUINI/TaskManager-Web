@{
    ViewData["Title"] = "Team Chat - TaskManager";
}

<style>
    .team-chat-container {
        height: calc(100vh - 40px);
        display: flex;
        background: #f8f9fa;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    /* =================== SIDEBAR UTILISATEURS =================== */
    .team-sidebar {
        width: 320px;
        background: white;
        border-right: 1px solid #e9ecef;
        display: flex;
        flex-direction: column;
    }

    .team-header {
        padding: 20px;
        border-bottom: 1px solid #e9ecef;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

        .team-header h3 {
            margin: 0 0 8px 0;
            font-size: 1.4rem;
            font-weight: 600;
        }

        .team-header p {
            margin: 0;
            opacity: 0.9;
            font-size: 0.9rem;
        }

    .team-search {
        padding: 15px;
        border-bottom: 1px solid #e9ecef;
    }

    .search-input {
        width: 100%;
        padding: 10px 15px;
        border: 1px solid #e9ecef;
        border-radius: 25px;
        font-size: 0.9rem;
        background: #f8f9fa;
        transition: all 0.3s ease;
    }

        .search-input:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

    .team-members {
        flex: 1;
        overflow-y: auto;
        padding: 10px 0;
    }

    .member-item {
        display: flex;
        align-items: center;
        padding: 12px 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        border-left: 3px solid transparent;
        position: relative;
    }

        .member-item:hover {
            background: #f8f9fa;
            border-left-color: #667eea;
        }

        .member-item.active {
            background: rgba(102, 126, 234, 0.1);
            border-left-color: #667eea;
        }

    .member-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 15px;
        border: 2px solid transparent;
        transition: all 0.3s ease;
        position: relative;
    }

    .member-item:hover .member-avatar {
        border-color: #667eea;
    }

    .member-info {
        flex: 1;
    }

    .member-name {
        font-weight: 600;
        font-size: 1rem;
        color: #2c3e50;
        margin: 0 0 4px 0;
    }

    .member-status {
        font-size: 0.85rem;
        color: #7f8c8d;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .status-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #95a5a6;
        position: relative;
    }

        .status-dot.online {
            background: #27ae60;
            animation: pulse 2s infinite;
        }

        .status-dot.away {
            background: #f39c12;
        }

        .status-dot.offline {
            background: #95a5a6;
        }

    @@keyframes pulse {
        0%, 100% {
            opacity: 1;
            transform: scale(1);
        }
        50% {
            opacity: 0.7;
            transform: scale(1.1);
        }
    }

    /* =================== ZONE DE CHAT =================== */
    .chat-area {
        flex: 1;
        display: flex;
        flex-direction: column;
        background: white;
    }

    .chat-header {
        padding: 20px;
        border-bottom: 1px solid #e9ecef;
        background: white;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .chat-user-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #667eea;
    }

    .chat-user-info h4 {
        margin: 0 0 4px 0;
        font-size: 1.2rem;
        color: #2c3e50;
    }

    .chat-user-info p {
        margin: 0;
        color: #7f8c8d;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        background: #f8f9fa;
    }

    .message {
        margin-bottom: 20px;
        display: flex;
        align-items: flex-start;
        gap: 12px;
        animation: fadeInUp 0.3s ease;
    }

        .message.own {
            flex-direction: row-reverse;
        }

    .message-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        flex-shrink: 0;
    }

    .message-content {
        max-width: 70%;
        background: white;
        padding: 12px 16px;
        border-radius: 18px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    .message.own .message-content {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .message-text {
        margin: 0;
        line-height: 1.5;
        word-wrap: break-word;
    }

    .message-time {
        font-size: 0.75rem;
        opacity: 0.7;
        margin-top: 4px;
    }

    .chat-input-area {
        padding: 20px;
        background: white;
        border-top: 1px solid #e9ecef;
    }

    .chat-input-container {
        display: flex;
        gap: 12px;
        align-items: flex-end;
    }

    .chat-input {
        flex: 1;
        padding: 12px 18px;
        border: 2px solid #e9ecef;
        border-radius: 25px;
        font-size: 1rem;
        resize: none;
        max-height: 120px;
        font-family: inherit;
        transition: all 0.3s ease;
    }

        .chat-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

    .send-button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        color: white;
        padding: 12px 20px;
        border-radius: 25px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .send-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .send-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

    /* =================== ÉTAT VIDE =================== */
    .empty-chat {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        color: #7f8c8d;
        padding: 40px;
    }

        .empty-chat i {
            font-size: 4rem;
            margin-bottom: 20px;
            color: #bdc3c7;
        }

        .empty-chat h3 {
            color: #2c3e50;
            margin-bottom: 10px;
        }

    /* =================== CONNEXION STATUS =================== */
    .connection-status {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        z-index: 9999;
        transition: all 0.3s ease;
    }

        .connection-status.connected {
            background: #27ae60;
            color: white;
        }

        .connection-status.connecting {
            background: #f39c12;
            color: white;
        }

        .connection-status.disconnected {
            background: #e74c3c;
            color: white;
        }

    .typing-indicator {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px 20px;
        background: rgba(102, 126, 234, 0.1);
        border-radius: 10px;
        margin: 10px 0;
        font-style: italic;
        color: #667eea;
        animation: fadeInUp 0.3s ease;
    }

    .typing-dots {
        display: flex;
        gap: 4px;
    }

        .typing-dots span {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: #667eea;
            animation: typingDots 1.4s infinite;
        }

            .typing-dots span:nth-child(2) {
                animation-delay: 0.2s;
            }

            .typing-dots span:nth-child(3) {
                animation-delay: 0.4s;
            }

    @@keyframes typingDots {
        0%, 60%, 100% {
            transform: translateY(0);
        }
        30% {
            transform: translateY(-10px);
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* =================== RESPONSIVE =================== */
    @@media (max-width: 768px) {
        .team-chat-container {
            flex-direction: column;
            height: auto;
            min-height: calc(100vh - 40px);
        }

        .team-sidebar {
            width: 100%;
            height: 300px;
        }

        .team-members {
            display: flex;
            overflow-x: auto;
            overflow-y: hidden;
            gap: 10px;
            padding: 10px 20px;
        }

        .member-item {
            flex: 0 0 auto;
            flex-direction: column;
            width: 80px;
            text-align: center;
            padding: 10px;
        }

        .member-avatar {
            margin-right: 0;
            margin-bottom: 8px;
        }

        .member-info {
            flex: none;
        }

        .member-name {
            font-size: 0.8rem;
        }

        .member-status {
            font-size: 0.7rem;
        }
    }
</style>
<p>Test direct : @(ViewBag.UsersCount ?? 999)</p>


<!-- Status de connexion -->
<div id="connectionStatus" class="connection-status" style="display: none;">
    <span id="connectionText">Connexion...</span>
</div>

<div class="team-chat-container">
    <!-- Sidebar avec la liste des utilisateurs -->
    <div class="team-sidebar">
        <div class="team-header">
            <h3>💬 Messagerie d'équipe</h3>
            <p>🏢 Espace de travail du gestionnaire de tâches</p>
            <small style="opacity: 0.8;">👥 @(ViewBag.UsersCount ?? 0) utilisateurs trouvés</small>
        </div>

        <div class="team-search">
            <input type="text" class="search-input" placeholder="🔍 Rechercher un membre..." id="searchInput">
        </div>

        <div class="team-members" id="teamMembers">
            <!-- Les membres réels seront chargés via JavaScript -->
        </div>
    </div>

    <!-- Zone de chat -->
    <div class="chat-area">
        <div class="chat-header" id="chatHeader" style="display: none;">
            <img src="" alt="" class="chat-user-avatar" id="chatUserAvatar">
            <div class="chat-user-info">
                <h4 id="chatUserName"></h4>
                <p id="chatUserStatus">
                    <span class="status-dot" id="chatStatusDot"></span>
                    <span id="chatStatusText"></span>
                </p>
            </div>
        </div>

        <div class="chat-messages" id="chatMessages">
            <div class="empty-chat" id="emptyChat">
                <i class="fas fa-comments"></i>
                <h3>Sélectionnez un membre de l'équipe</h3>
                <p>Choisissez quelqu'un dans votre équipe pour démarrer une conversation</p>
            </div>
        </div>

        <div class="chat-input-area" id="chatInputArea" style="display: none;">
            <div class="chat-input-container">
                <textarea class="chat-input" id="messageInput" placeholder="💬 Tapez votre message..." rows="1"></textarea>
                <button class="send-button" id="sendButton">
                    <i class="fas fa-paper-plane"></i>
                    Envoyer
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // =================== INITIALISATION ET DEBUG ===================
    console.log("=== INITIALISATION DU CHAT D'ÉQUIPE ===");
    
    // Variables globales
    const currentUserName = "@ViewBag.CurrentUser" || "Utilisateur";
    const currentUserId = "@ViewBag.CurrentUserId" || "0";
    let selectedUser = null;
    let connectedUsers = [];
    let conversationHistory = {};
    let teamMembersFromServer = [];

    // =================== CONFIGURATION SIGNALR ===================
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .withAutomaticReconnect([0, 2000, 10000, 30000])
        .configureLogging(signalR.LogLevel.Information)
        .build();

    // =================== CHARGEMENT DES DONNÉES ===================
    function loadInitialData() {
        try {
            // 1. Récupération des données depuis ViewBag
            const rawJson = '@Html.Raw(ViewBag.TeamMembersJson)' || '[]';
            console.log("[DATA] JSON brut:", rawJson);

            // 2. Nettoyage des données JSON
            const cleanJson = rawJson
                .replace(/&quot;/g, '"')
                .replace(/&amp;/g, '&')
                .replace(/\\/g, '');

            // 3. Parsing des données
            teamMembersFromServer = JSON.parse(cleanJson);
            console.log("[DATA] Données parsées:", teamMembersFromServer);

            // 4. Validation des données
            if (!Array.isArray(teamMembersFromServer)) {
                throw new Error("Les données ne sont pas un tableau valide");
            }

            // 5. Chargement initial
            loadTeamMembers();
            initializeSignalR();

        } catch (error) {
            console.error("[ERREUR] Chargement initial:", error);
            showErrorNotification("Erreur de chargement des données");
            teamMembersFromServer = [];
        }
    }

    // =================== GESTION DES MEMBRES ===================
    function loadTeamMembers() {
        const container = document.getElementById('teamMembers');
        if (!container) {
            console.error("[ERREUR] Container 'teamMembers' introuvable");
            return;
        }

        container.innerHTML = '';

        if (!teamMembersFromServer || teamMembersFromServer.length === 0) {
            container.innerHTML = `
                <div class="alert alert-warning">
                    Aucun membre d'équipe trouvé dans la base de données
                </div>
            `;
            return;
        }

        teamMembersFromServer.forEach(member => {
            if (!member.idclass) {
                console.warn("[WARN] Membre sans ID:", member);
                return;
            }

            const memberElement = createMemberElement(member);
            container.appendChild(memberElement);
        });

        console.log(`[SUCCÈS] ${teamMembersFromServer.length} membres chargés`);
    }

    function createMemberElement(member) {
        const memberElement = document.createElement('div');
        memberElement.className = 'member-item';
        memberElement.dataset.userId = member.idclass;
        memberElement.dataset.userName = member.LastName || '';

        const memberName = member.LastName || 'Utilisateur';
        const position = member.position || 'Membre';
        const avatarUrl = member.avatar || 
            `https://ui-avatars.com/api/?name=${encodeURIComponent(memberName.substring(0,1))}&size=100&background=667eea&color=fff`;

        memberElement.innerHTML = `
            <img src="${avatarUrl}" alt="${memberName}" class="member-avatar"
                 onerror="this.src='https://ui-avatars.com/api/?name=U&size=100&background=667eea&color=fff'">
            <div class="member-info">
                <div class="member-name">${memberName}</div>
                <div class="member-status">
                    <span class="status-dot ${member.status || 'offline'}" id="status-${member.idclass}"></span>
                    <span id="status-text-${member.idclass}">${position}</span>
                </div>
            </div>
        `;

        memberElement.addEventListener('click', () => selectUser(member));
        return memberElement;
    }

    // =================== GESTION DU CHAT ===================
    function selectUser(member) {
        if (!member) return;

        selectedUser = member;
        console.log("[CHAT] Utilisateur sélectionné:", member);

        // Mise à jour de l'interface
        document.querySelectorAll('.member-item').forEach(item => {
            item.classList.remove('active');
        });
        
        const selectedElement = document.querySelector(`[data-user-id="${member.idclass}"]`);
        if (selectedElement) selectedElement.classList.add('active');

        updateChatHeader(member);
        loadConversationHistory(member.LastName || member.idclass);
        showChatInputArea();
    }

    function updateChatHeader(user) {
        const chatHeader = document.getElementById('chatHeader');
        if (!chatHeader) return;

        const chatUserAvatar = document.getElementById('chatUserAvatar');
        const chatUserName = document.getElementById('chatUserName');
        const chatStatusDot = document.getElementById('chatStatusDot');
        const chatStatusText = document.getElementById('chatStatusText');

        if (!chatUserAvatar || !chatUserName || !chatStatusDot || !chatStatusText) return;

        chatHeader.style.display = 'flex';
        
        const userName = user.LastName || 'Utilisateur';
        const avatarUrl = user.avatar || 
            `https://ui-avatars.com/api/?name=${encodeURIComponent(userName.substring(0,1))}&size=100&background=667eea&color=fff`;

        chatUserAvatar.src = avatarUrl;
        chatUserAvatar.alt = userName;
        chatUserName.textContent = userName;

        const isOnline = connectedUsers.some(u => u.userName === userName);
        chatStatusDot.className = `status-dot ${isOnline ? 'online' : 'offline'}`;
        chatStatusText.textContent = isOnline ? '🟢 En ligne' : '⚫ Hors ligne';
    }

    // =================== GESTION DES MESSAGES ===================
    function sendMessage() {
        const messageInput = document.getElementById('messageInput');
        if (!messageInput || !selectedUser) return;

        const message = messageInput.value.trim();
        if (!message) return;

        const messageData = {
            senderName: currentUserName,
            message: message,
            timestamp: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
            isOwn: true,
            targetUserName: selectedUser.LastName || selectedUser.idclass
        };

        saveMessageToHistory(messageData.targetUserName, messageData);
        addMessageToChat(messageData);

        connection.invoke("SendTeamMessage", message, currentUserName, messageData.targetUserName)
            .then(() => {
                messageInput.value = '';
                messageInput.style.height = 'auto';
            })
            .catch(err => {
                console.error("[ERREUR] Envoi message:", err);
                showErrorNotification("Erreur lors de l'envoi du message");
            });
    }

    function saveMessageToHistory(targetUserName, messageData) {
        if (!targetUserName) return;

        if (!conversationHistory[targetUserName]) {
            conversationHistory[targetUserName] = [];
        }

        conversationHistory[targetUserName].push({
            ...messageData,
            id: Date.now() + Math.random()
        });
    }

    function loadConversationHistory(targetUserName) {
        const messagesContainer = document.getElementById('chatMessages');
        if (!messagesContainer) return;

        messagesContainer.innerHTML = '';
        const messages = conversationHistory[targetUserName] || [];

        if (messages.length === 0) {
            const welcomeMessage = {
                senderName: targetUserName,
                message: `👋 Salut ! Je suis ${targetUserName}. Comment ça va ?`,
                timestamp: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                isOwn: false
            };
            
            setTimeout(() => {
                addMessageToChat(welcomeMessage);
                saveMessageToHistory(targetUserName, welcomeMessage);
            }, 500);
        } else {
            messages.forEach(message => addMessageToChat(message));
        }
    }

    function addMessageToChat(messageData) {
        const messagesContainer = document.getElementById('chatMessages');
        if (!messagesContainer) return;

        const messageElement = document.createElement('div');
        messageElement.className = `message ${messageData.isOwn ? 'own' : ''}`;

        const avatarSrc = messageData.isOwn
            ? `https://ui-avatars.com/api/?name=${encodeURIComponent(currentUserName)}&size=100&background=667eea&color=fff`
            : selectedUser?.avatar || `https://ui-avatars.com/api/?name=${encodeURIComponent(messageData.senderName.substring(0,1))}&size=100&background=667eea&color=fff`;

        messageElement.innerHTML = `
            <img src="${avatarSrc}" alt="Avatar" class="message-avatar"
                 onerror="this.src='https://ui-avatars.com/api/?name=U&size=100&background=667eea&color=fff'">
            <div class="message-content">
                <p class="message-text">${escapeHtml(messageData.message)}</p>
                <div class="message-time">${messageData.timestamp}</div>
            </div>
        `;

        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // =================== SIGNALR EVENT HANDLERS ===================
    function initializeSignalR() {
        connection.start()
            .then(() => {
                console.log("[SIGNALR] Connecté au hub");
                connection.invoke("JoinChat", currentUserName);
                updateConnectionStatus("connected");
            })
            .catch(err => {
                console.error("[ERREUR] Connexion SignalR:", err);
                updateConnectionStatus("disconnected");
            });

        connection.on("ReceiveTeamMessage", (messageData) => {
            console.log("[SIGNALR] Message reçu:", messageData);
            
            if (!messageData.senderName || !messageData.message) return;
            
            saveMessageToHistory(messageData.senderName, {
                ...messageData,
                isOwn: messageData.senderName === currentUserName
            });

            if (selectedUser && selectedUser.LastName === messageData.senderName) {
                addMessageToChat({
                    ...messageData,
                    isOwn: messageData.senderName === currentUserName
                });
            }
        });

        connection.on("UserJoined", (userName) => {
            console.log(`[SIGNALR] ${userName} a rejoint`);
            updateUserOnlineStatus(userName, true);
        });

        connection.on("UserLeft", (userName) => {
            console.log(`[SIGNALR] ${userName} a quitté`);
            updateUserOnlineStatus(userName, false);
        });

        connection.on("ConnectedUsersList", (users) => {
            console.log("[SIGNALR] Liste utilisateurs:", users);
            connectedUsers = users;
            updateAllUserStatuses();
        });
    }

    // =================== UTILITAIRES ===================
    function updateConnectionStatus(status) {
        const statusElement = document.getElementById('connectionStatus');
        const textElement = document.getElementById('connectionText');
        if (!statusElement || !textElement) return;

        statusElement.className = `connection-status ${status}`;
        statusElement.style.display = 'block';

        const statusMessages = {
            connected: { text: '🟢 Connecté', timeout: 3000 },
            disconnected: { text: '🔴 Déconnecté', timeout: null },
            connecting: { text: '🟡 Connexion...', timeout: null }
        };

        textElement.textContent = statusMessages[status]?.text || status;
        
        if (statusMessages[status]?.timeout) {
            setTimeout(() => statusElement.style.display = 'none', statusMessages[status].timeout);
        }
    }

    function updateUserOnlineStatus(userName, isOnline) {
        if (!teamMembersFromServer || !userName) return;

        const member = teamMembersFromServer.find(m => 
            (m.LastName === userName) || (m.idclass.toString() === userName)
        );
        
        if (member) {
            member.status = isOnline ? 'online' : 'offline';
            
            const statusDot = document.getElementById(`status-${member.idclass}`);
            const statusText = document.getElementById(`status-text-${member.idclass}`);
            
            if (statusDot) statusDot.className = `status-dot ${member.status}`;
            if (statusText) statusText.textContent = isOnline ? '🟢 En ligne' : (member.position || 'Hors ligne');
        }
    }

    function updateAllUserStatuses() {
        teamMembersFromServer.forEach(member => {
            const isOnline = connectedUsers.some(u => 
                u.userName === member.LastName || u.userName === member.idclass.toString()
            );
            updateUserOnlineStatus(member.LastName || member.idclass, isOnline);
        });
    }

    function escapeHtml(text) {
        return text
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    function showErrorNotification(message) {
        const notification = document.createElement('div');
        notification.className = 'notification error';
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            background: #e74c3c;
            color: white;
            font-weight: 600;
            z-index: 9999;
            animation: slideInRight 0.3s ease;
        `;

        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
    }

    function showChatInputArea() {
        const chatInputArea = document.getElementById('chatInputArea');
        const emptyChat = document.getElementById('emptyChat');
        
        if (chatInputArea) chatInputArea.style.display = 'block';
        if (emptyChat) emptyChat.style.display = 'none';
        
        const messageInput = document.getElementById('messageInput');
        if (messageInput) messageInput.focus();
    }

    // =================== INITIALISATION ===================
    document.addEventListener('DOMContentLoaded', function() {
        // Initialisation des écouteurs d'événements
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const searchInput = document.getElementById('searchInput');

        if (messageInput) {
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
            });

            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
        }

        if (sendButton) {
            sendButton.addEventListener('click', sendMessage);
        }

        if (searchInput) {
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                document.querySelectorAll('.member-item').forEach(member => {
                    const name = member.dataset.userName.toLowerCase();
                    member.style.display = name.includes(searchTerm) ? 'flex' : 'none';
                });
            });
        }

        // Demander la permission pour les notifications
        if (Notification.permission === "default") {
            Notification.requestPermission().catch(console.error);
        }

        // Charger les données initiales
        loadInitialData();
    });

    // Export pour le debug
    window.teamChatDebug = {
        connection,
        currentUser: { name: currentUserName, id: currentUserId },
        getSelectedUser: () => selectedUser,
        getConnectedUsers: () => connectedUsers,
        getConversationHistory: () => conversationHistory,
        getTeamMembers: () => teamMembersFromServer
    };
</script>

@section Scripts {
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
}