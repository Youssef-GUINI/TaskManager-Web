@{
    ViewData["Title"] = "Team Chat - TaskManager";
}

<style>
    .team-chat-container {
        height: calc(100vh - 40px);
        display: flex;
        background: #f8f9fa;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    /* =================== SIDEBAR UTILISATEURS =================== */
    .team-sidebar {
        width: 320px;
        background: white;
        border-right: 1px solid #e9ecef;
        display: flex;
        flex-direction: column;
    }

    .team-header {
        padding: 20px;
        border-bottom: 1px solid #e9ecef;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

        .team-header h3 {
            margin: 0 0 8px 0;
            font-size: 1.4rem;
            font-weight: 600;
        }

        .team-header p {
            margin: 0;
            opacity: 0.9;
            font-size: 0.9rem;
        }

    .team-search {
        padding: 15px;
        border-bottom: 1px solid #e9ecef;
    }

    .search-input {
        width: 100%;
        padding: 10px 15px;
        border: 1px solid #e9ecef;
        border-radius: 25px;
        font-size: 0.9rem;
        background: #f8f9fa;
        transition: all 0.3s ease;
    }

        .search-input:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

    .team-members {
        flex: 1;
        overflow-y: auto;
        padding: 10px 0;
    }

    .member-item {
        display: flex;
        align-items: center;
        padding: 12px 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        border-left: 3px solid transparent;
        position: relative;
    }

        .member-item:hover {
            background: #f8f9fa;
            border-left-color: #667eea;
        }

        .member-item.active {
            background: rgba(102, 126, 234, 0.1);
            border-left-color: #667eea;
        }

    .member-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 15px;
        border: 2px solid transparent;
        transition: all 0.3s ease;
        position: relative;
    }

    .member-item:hover .member-avatar {
        border-color: #667eea;
    }

    .member-info {
        flex: 1;
    }

    .member-name {
        font-weight: 600;
        font-size: 1rem;
        color: #2c3e50;
        margin: 0 0 4px 0;
    }

    .member-status {
        font-size: 0.85rem;
        color: #7f8c8d;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .status-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #95a5a6;
        position: relative;
    }

        .status-dot.online {
            background: #27ae60;
            animation: pulse 2s infinite;
        }

        .status-dot.away {
            background: #f39c12;
        }

        .status-dot.offline {
            background: #95a5a6;
        }

    @@keyframes pulse {
        0%, 100%

    {
        opacity: 1;
        transform: scale(1);
    }

    50% {
        opacity: 0.7;
        transform: scale(1.1);
    }

    }

    /* =================== ZONE DE CHAT =================== */
    .chat-area {
        flex: 1;
        display: flex;
        flex-direction: column;
        background: white;
    }

    .chat-header {
        padding: 20px;
        border-bottom: 1px solid #e9ecef;
        background: white;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .chat-user-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #667eea;
    }

    .chat-user-info h4 {
        margin: 0 0 4px 0;
        font-size: 1.2rem;
        color: #2c3e50;
    }

    .chat-user-info p {
        margin: 0;
        color: #7f8c8d;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        background: #f8f9fa;
    }

    .message {
        margin-bottom: 20px;
        display: flex;
        align-items: flex-start;
        gap: 12px;
        animation: fadeInUp 0.3s ease;
    }

        .message.own {
            flex-direction: row-reverse;
        }

    .message-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        flex-shrink: 0;
    }

    .message-content {
        max-width: 70%;
        background: white;
        padding: 12px 16px;
        border-radius: 18px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    .message.own .message-content {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .message-text {
        margin: 0;
        line-height: 1.5;
        word-wrap: break-word;
    }

    .message-time {
        font-size: 0.75rem;
        opacity: 0.7;
        margin-top: 4px;
    }

    .chat-input-area {
        padding: 20px;
        background: white;
        border-top: 1px solid #e9ecef;
    }

    .chat-input-container {
        display: flex;
        gap: 12px;
        align-items: flex-end;
    }

    .chat-input {
        flex: 1;
        padding: 12px 18px;
        border: 2px solid #e9ecef;
        border-radius: 25px;
        font-size: 1rem;
        resize: none;
        max-height: 120px;
        font-family: inherit;
        transition: all 0.3s ease;
    }

        .chat-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

    .send-button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        color: white;
        padding: 12px 20px;
        border-radius: 25px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .send-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .send-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

    /* =================== ÉTAT VIDE =================== */
    .empty-chat {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        color: #7f8c8d;
        padding: 40px;
    }

        .empty-chat i {
            font-size: 4rem;
            margin-bottom: 20px;
            color: #bdc3c7;
        }

        .empty-chat h3 {
            color: #2c3e50;
            margin-bottom: 10px;
        }

    /* =================== CONNEXION STATUS =================== */
    .connection-status {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        z-index: 9999;
        transition: all 0.3s ease;
    }

        .connection-status.connected {
            background: #27ae60;
            color: white;
        }

        .connection-status.connecting {
            background: #f39c12;
            color: white;
        }

        .connection-status.disconnected {
            background: #e74c3c;
            color: white;
        }

    .typing-indicator {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px 20px;
        background: rgba(102, 126, 234, 0.1);
        border-radius: 10px;
        margin: 10px 0;
        font-style: italic;
        color: #667eea;
        animation: fadeInUp 0.3s ease;
    }

    .typing-dots {
        display: flex;
        gap: 4px;
    }

        .typing-dots span {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: #667eea;
            animation: typingDots 1.4s infinite;
        }

            .typing-dots span:nth-child(2) {
                animation-delay: 0.2s;
            }

            .typing-dots span:nth-child(3) {
                animation-delay: 0.4s;
            }

    @@keyframes typingDots {
        0%, 60%, 100%

    {
        transform: translateY(0);
    }

    30% {
        transform: translateY(-10px);
    }

    }

    @@keyframes fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    /* =================== RESPONSIVE =================== */
    @@media (max-width: 768px) {
        .team-chat-container

    {
        flex-direction: column;
        height: auto;
        min-height: calc(100vh - 40px);
    }

    .team-sidebar {
        width: 100%;
        height: 300px;
    }

    .team-members {
        display: flex;
        overflow-x: auto;
        overflow-y: hidden;
        gap: 10px;
        padding: 10px 20px;
    }

    .member-item {
        flex: 0 0 auto;
        flex-direction: column;
        width: 80px;
        text-align: center;
        padding: 10px;
    }

    .member-avatar {
        margin-right: 0;
        margin-bottom: 8px;
    }

    .member-info {
        flex: none;
    }

    .member-name {
        font-size: 0.8rem;
    }

    .member-status {
        font-size: 0.7rem;
    }

    }
</style>

<!-- Status de connexion -->
<div id="connectionStatus" class="connection-status" style="display: none;">
    <span id="connectionText">Connexion...</span>
</div>

<div class="team-chat-container">
    <!-- Sidebar avec la liste des utilisateurs -->
    <div class="team-sidebar">
        <div class="team-header">
            <h3>💬 Team Chat</h3>
            <p>🏢 TaskManager Workspace</p>
            <small style="opacity: 0.8;">👥 @(ViewBag.UsersCount ?? 0) utilisateurs trouvés</small>
        </div>

        <div class="team-search">
            <input type="text" class="search-input" placeholder="🔍 Rechercher un membre..." id="searchInput">
        </div>

        <div class="team-members" id="teamMembers">
            <!-- Les membres réels seront chargés via JavaScript -->
        </div>
    </div>

    <!-- Zone de chat -->
    <div class="chat-area">
        <div class="chat-header" id="chatHeader" style="display: none;">
            <img src="" alt="" class="chat-user-avatar" id="chatUserAvatar">
            <div class="chat-user-info">
                <h4 id="chatUserName"></h4>
                <p id="chatUserStatus">
                    <span class="status-dot" id="chatStatusDot"></span>
                    <span id="chatStatusText"></span>
                </p>
            </div>
        </div>

        <div class="chat-messages" id="chatMessages">
            <div class="empty-chat" id="emptyChat">
                <i class="fas fa-comments"></i>
                <h3>Sélectionnez un membre de l'équipe</h3>
                <p>Choisissez quelqu'un dans votre équipe pour démarrer une conversation</p>
            </div>
        </div>

        <div class="chat-input-area" id="chatInputArea" style="display: none;">
            <div class="chat-input-container">
                <textarea class="chat-input" id="messageInput" placeholder="💬 Tapez votre message..." rows="1"></textarea>
                <button class="send-button" id="sendButton">
                    <i class="fas fa-paper-plane"></i>
                    Envoyer
                </button>
            </div>
        </div>
    </div>
</div>

<!-- SignalR Script -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>

<script>
    // =================== DONNÉES RÉELLES DE LA BASE DE DONNÉES ===================

    // ✨ RÉCUPÉRATION SÉCURISÉE DES UTILISATEURS
    let teamMembersFromServer = [];

    try {
        const jsonData = '@Html.Raw(ViewBag.TeamMembersJson)';
        console.log("🔍 JSON brut reçu:", jsonData);

        if (jsonData && jsonData !== '' && jsonData !== 'null') {
            teamMembersFromServer = JSON.parse(jsonData);
            console.log("✅ JSON parsé avec succès:", teamMembersFromServer);
        } else {
            console.warn("⚠️ Pas de données JSON valides");
            teamMembersFromServer = [];
        }
    } catch (error) {
        console.error("❌ Erreur de parsing JSON:", error);
        console.log("🔍 Données problématiques:", '@Html.Raw(ViewBag.TeamMembersJson)');
        teamMembersFromServer = [];
    }

    console.log("👥 Utilisateurs finaux:", teamMembersFromServer);
    console.log("🔍 Type des données:", typeof teamMembersFromServer);
    console.log("🔍 Nombre d'utilisateurs:", teamMembersFromServer ? teamMembersFromServer.length : 'null/undefined');
    console.log("🎯 Nombre d'utilisateurs depuis serveur:", @(ViewBag.UsersCount ?? 0));

    // Debug des données ViewBag
    console.log("🎯 ViewBag CurrentUser:", "@ViewBag.CurrentUser");
    console.log("🎯 ViewBag CurrentUserId:", "@ViewBag.CurrentUserId");

    // Variables globales
    const currentUserName = "@ViewBag.CurrentUser";
    const currentUserId = "@ViewBag.CurrentUserId";
    let selectedUser = null;
    let connectedUsers = [];
    let typingTimer = null;
    let conversationHistory = {};

    // =================== CONFIGURATION SIGNALR ===================

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .withAutomaticReconnect([0, 2000, 10000, 30000])
        .configureLogging(signalR.LogLevel.Information)
        .build();

    // ✨ FONCTION POUR CRÉER DES UTILISATEURS DE TEST (DÉFINIE EN PREMIER)
    function createTestUsers() {
        console.log("🔄 Création d'utilisateurs de test...");

        const testUsers = [
            {
                id: "test-1",
                name: "Youssef El Mansouri",
                avatar: "https://ui-avatars.com/api/?name=Youssef+El+Mansouri&size=100&background=667eea&color=fff",
                status: "offline",
                position: "Chef de Projet",
                department: "IT"
            },
            {
                id: "test-2",
                name: "Amina Benali",
                avatar: "https://ui-avatars.com/api/?name=Amina+Benali&size=100&background=e74c3c&color=fff",
                status: "offline",
                position: "Développeuse Frontend",
                department: "IT"
            },
            {
                id: "test-3",
                name: "Hassan Idrissi",
                avatar: "https://ui-avatars.com/api/?name=Hassan+Idrissi&size=100&background=27ae60&color=fff",
                status: "offline",
                position: "Développeur Backend",
                department: "IT"
            }
        ];

        // Remplacer les données vides par les données de test
        teamMembersFromServer = testUsers;

        const container = document.getElementById('teamMembers');
        container.innerHTML = '<div style="padding: 10px; background: #fff3cd; color: #856404; margin: 10px; border-radius: 5px; font-size: 0.9rem;">⚠️ Utilisateurs de test (problème de base de données)</div>';

        testUsers.forEach(member => {
            const memberElement = document.createElement('div');
            memberElement.className = 'member-item';
            memberElement.dataset.userId = member.id;

            memberElement.innerHTML = `
                <img src="${member.avatar}" alt="${member.name}" class="member-avatar">
                <div class="member-info">
                    <div class="member-name">${member.name}</div>
                    <div class="member-status">
                        <span class="status-dot ${member.status}" id="status-${member.id}"></span>
                        <span id="status-text-${member.id}">${member.position}</span>
                    </div>
                </div>
            `;

            memberElement.addEventListener('click', () => selectUser(member));
            container.appendChild(memberElement);
        });

        console.log("✅ Utilisateurs de test créés");
    }

    // =================== FONCTIONS PRINCIPALES ===================

    function loadTeamMembers() {
        const container = document.getElementById('teamMembers');
        container.innerHTML = '';

        console.log("🔄 Chargement des membres réels...");
        console.log("🔍 teamMembersFromServer:", teamMembersFromServer);

        // ✨ VÉRIFICATION ET GESTION D'ERREUR
        if (!teamMembersFromServer || !Array.isArray(teamMembersFromServer) || teamMembersFromServer.length === 0) {
            console.error("❌ Pas d'utilisateurs trouvés!");
            console.log("🔍 Valeur de teamMembersFromServer:", teamMembersFromServer);

            // Afficher un message d'erreur dans la sidebar
            container.innerHTML = `
                <div style="padding: 20px; text-align: center; color: #e74c3c;">
                    <p><strong>❌ Aucun utilisateur trouvé</strong></p>
                    <p style="font-size: 0.9rem;">Vérifiez la base de données</p>
                </div>
            `;
            return;
        }

        // ✨ UTILISER LES VRAIS UTILISATEURS DE LA BASE DE DONNÉES
        teamMembersFromServer.forEach((member, index) => {
            console.log(`👤 Chargement membre ${index + 1}:`, member);

            const memberElement = document.createElement('div');
            memberElement.className = 'member-item';
            memberElement.dataset.userId = member.id;

            memberElement.innerHTML = `
                <img src="${member.avatar}" alt="${member.name}" class="member-avatar"
                     onerror="this.src='https://ui-avatars.com/api/?name=${encodeURIComponent(member.name)}&size=100&background=667eea&color=fff'">
                <div class="member-info">
                    <div class="member-name">${member.name}</div>
                    <div class="member-status">
                        <span class="status-dot ${member.status}" id="status-${member.id}"></span>
                        <span id="status-text-${member.id}">${member.position || 'Membre de l\'équipe'}</span>
                    </div>
                </div>
            `;

            memberElement.addEventListener('click', () => selectUser(member));
            container.appendChild(memberElement);
        });

        console.log(`✅ ${teamMembersFromServer.length} membres chargés depuis la base de données`);
    }

    function selectUser(member) {
        selectedUser = member;
        console.log("👤 Utilisateur sélectionné:", member);

        // Mettre à jour l'état actif
        document.querySelectorAll('.member-item').forEach(item => {
            item.classList.remove('active');
        });
        document.querySelector(`[data-user-id="${member.id}"]`).classList.add('active');

        // Mettre à jour l'en-tête du chat
        updateChatHeader(member);

        // Charger l'historique de conversation
        loadConversationHistory(member.name);

        // Afficher la zone de saisie
        showChatInputArea();
    }

    function updateChatHeader(user) {
        const chatHeader = document.getElementById('chatHeader');
        const chatUserAvatar = document.getElementById('chatUserAvatar');
        const chatUserName = document.getElementById('chatUserName');
        const chatStatusDot = document.getElementById('chatStatusDot');
        const chatStatusText = document.getElementById('chatStatusText');

        chatHeader.style.display = 'flex';
        chatUserAvatar.src = user.avatar;
        chatUserAvatar.alt = user.name;
        chatUserName.textContent = user.name;

        const isOnline = connectedUsers.some(u => u.userName === user.name);
        chatStatusDot.className = `status-dot ${isOnline ? 'online' : 'offline'}`;
        chatStatusText.textContent = isOnline ? '🟢 En ligne' : '⚫ Hors ligne';
    }

    function showChatInputArea() {
        document.getElementById('chatInputArea').style.display = 'block';
        document.getElementById('emptyChat').style.display = 'none';
        document.getElementById('messageInput').focus();
    }

    // =================== GESTION DES MESSAGES ===================

    function saveMessageToHistory(targetUserName, messageData) {
        if (!conversationHistory[targetUserName]) {
            conversationHistory[targetUserName] = [];
        }

        conversationHistory[targetUserName].push({
            senderName: messageData.senderName,
            message: messageData.message,
            timestamp: messageData.timestamp,
            isOwn: messageData.isOwn,
            id: Date.now() + Math.random()
        });

        console.log(`💾 Message sauvegardé pour ${targetUserName}:`, messageData);
    }

    function loadConversationHistory(userName) {
        const messagesContainer = document.getElementById('chatMessages');
        messagesContainer.innerHTML = '';

        const messages = conversationHistory[userName] || [];

        if (messages.length === 0) {
            // Message de bienvenue
            const welcomeMessage = {
                senderName: userName,
                message: `👋 Salut ! Je suis ${userName}. Comment ça va ?`,
                timestamp: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                isOwn: false
            };

            setTimeout(() => {
                addMessageToChat(welcomeMessage);
                saveMessageToHistory(userName, welcomeMessage);
            }, 500);
        } else {
            messages.forEach(message => {
                addMessageToChat(message);
            });

            console.log(`📜 Chargé ${messages.length} messages pour ${userName}`);
        }
    }

    function sendMessage() {
        const messageInput = document.getElementById('messageInput');
        const message = messageInput.value.trim();

        if (!message || !selectedUser) {
            console.warn("⚠️ Pas de message ou utilisateur sélectionné");
            return;
        }

        const messageData = {
            senderName: currentUserName,
            message: message,
            timestamp: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
            isOwn: true
        };

        // Sauvegarder immédiatement
        saveMessageToHistory(selectedUser.name, messageData);

        console.log(`📤 Envoi message pour ${selectedUser.name}:`, message);

        // Envoyer via SignalR
        connection.invoke("SendTeamMessage", message, currentUserName, selectedUser.name)
            .then(() => {
                messageInput.value = '';
                messageInput.style.height = 'auto';
                notifyTyping(false);
            })
            .catch(err => {
                console.error("❌ Erreur envoi:", err);
                showNotification("Erreur lors de l'envoi", "error");
            });
    }

    function addMessageToChat(messageData) {
        const messagesContainer = document.getElementById('chatMessages');
        if (!messagesContainer) return;

        const existingTyping = document.getElementById('typing-indicator');
        if (existingTyping) {
            existingTyping.remove();
        }

        const messageElement = document.createElement('div');
        messageElement.className = `message ${messageData.isOwn ? 'own' : ''}`;

        const avatarSrc = messageData.isOwn ?
            'https://ui-avatars.com/api/?name=' + encodeURIComponent(currentUserName) + '&size=100&background=667eea&color=fff' :
            (selectedUser ? selectedUser.avatar : '');

        messageElement.innerHTML = `
            <img src="${avatarSrc}" alt="Avatar" class="message-avatar"
                 onerror="this.src='https://ui-avatars.com/api/?name=User&size=100&background=667eea&color=fff'">
            <div class="message-content">
                <p class="message-text">${escapeHtml(messageData.message)}</p>
                <div class="message-time">${messageData.timestamp}</div>
            </div>
        `;

        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;

        // Animation
        messageElement.style.opacity = '0';
        messageElement.style.transform = 'translateY(20px)';

        requestAnimationFrame(() => {
            messageElement.style.transition = 'all 0.3s ease';
            messageElement.style.opacity = '1';
            messageElement.style.transform = 'translateY(0)';
        });
    }

    // =================== ÉVÉNEMENTS SIGNALR ===================

    connection.start().then(function () {
        console.log("🚀 SignalR connecté avec vrais utilisateurs!");
        updateConnectionStatus("connected");
        connection.invoke("JoinChat", currentUserName);

        // 🔄 CHARGER LES MEMBRES OU CRÉER DES DONNÉES DE TEST
        if (!teamMembersFromServer || teamMembersFromServer.length === 0) {
            console.warn("⚠️ Pas d'utilisateurs, création de données de test...");
            createTestUsers();
        } else {
            loadTeamMembers();
        }
    }).catch(function (err) {
        console.error("❌ Erreur connexion SignalR:", err);
        updateConnectionStatus("disconnected");
        showNotification("Erreur de connexion au chat", "error");
    });

    // Recevoir les messages
    connection.on("ReceiveTeamMessage", function (messageData) {
        console.log("📨 Message équipe reçu:", messageData);
        saveMessageToHistory(messageData.targetUserName, messageData);

        if (selectedUser &&
            (selectedUser.name === messageData.targetUserName ||
             messageData.senderName === currentUserName)) {

            const isOwn = messageData.senderName === currentUserName;

            addMessageToChat({
                senderName: messageData.senderName,
                message: messageData.message,
                timestamp: messageData.timestamp,
                isOwn: isOwn
            });

            if (document.hidden && !isOwn) {
                showDesktopNotification(messageData.senderName, messageData.message);
            }
        }
    });

    connection.on("UserJoined", function (userName) {
        console.log(`👋 ${userName} a rejoint`);
        showNotification(`${userName} a rejoint le chat`, "success");
        updateUserOnlineStatus(userName, true);
    });

    connection.on("UserLeft", function (userName) {
        console.log(`👋 ${userName} est parti`);
        showNotification(`${userName} a quitté le chat`, "info");
        updateUserOnlineStatus(userName, false);
    });

    connection.on("ConnectedUsersList", function (users) {
        console.log("👥 Utilisateurs connectés:", users);
        connectedUsers = users;
        updateAllUserStatuses();
    });

    // =================== FONCTIONS UTILITAIRES ===================

    function updateConnectionStatus(status) {
        const statusElement = document.getElementById('connectionStatus');
        const textElement = document.getElementById('connectionText');

        statusElement.className = `connection-status ${status}`;

        switch(status) {
            case 'connected':
                textElement.textContent = '🟢 Connecté au chat';
                statusElement.style.display = 'block';
                setTimeout(() => statusElement.style.display = 'none', 3000);
                break;
            case 'connecting':
                textElement.textContent = '🟡 Connexion...';
                statusElement.style.display = 'block';
                break;
            case 'disconnected':
                textElement.textContent = '🔴 Déconnecté';
                statusElement.style.display = 'block';
                break;
        }
    }

    function updateUserOnlineStatus(userName, isOnline) {
        // ✨ METTRE À JOUR LE STATUT DES VRAIS UTILISATEURS
        const member = teamMembersFromServer.find(m => m.name === userName);
        if (member) {
            member.status = isOnline ? 'online' : 'offline';

            const statusDot = document.getElementById(`status-${member.id}`);
            const statusText = document.getElementById(`status-text-${member.id}`);

            if (statusDot && statusText) {
                statusDot.className = `status-dot ${member.status}`;
                statusText.textContent = isOnline ? '🟢 En ligne' : (member.position || 'Hors ligne');
            }
        }
    }

    function updateAllUserStatuses() {
        teamMembersFromServer.forEach(member => {
            const isOnline = connectedUsers.some(u => u.userName === member.name);
            updateUserOnlineStatus(member.name, isOnline);
        });
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    function showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 9999;
            animation: slideInRight 0.3s ease;
        `;

        const colors = {
            success: '#27ae60',
            error: '#e74c3c',
            info: '#3498db'
        };

        notification.style.background = colors[type] || colors.info;
        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    function showDesktopNotification(senderName, message) {
        if (Notification.permission === "granted") {
            new Notification(`💬 Message de ${senderName}`, {
                body: message,
                icon: '/favicon.ico',
                tag: 'team-chat'
            });
        }
    }

    function notifyTyping(isTyping) {
        // Implémentation de l'indicateur de frappe
    }

    // =================== EVENT LISTENERS ===================

    document.addEventListener('DOMContentLoaded', function() {
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const searchInput = document.getElementById('searchInput');

        if (messageInput) {
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
            });

            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
        }

        if (sendButton) {
            sendButton.addEventListener('click', sendMessage);
        }

        if (searchInput) {
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const members = document.querySelectorAll('.member-item');

                members.forEach(member => {
                    const name = member.querySelector('.member-name').textContent.toLowerCase();
                    if (name.includes(searchTerm)) {
                        member.style.display = 'flex';
                    } else {
                        member.style.display = 'none';
                    }
                });
            });
        }

        // Demander permission pour notifications
        if (Notification.permission === "default") {
            Notification.requestPermission();
        }
    });

    // =================== DEBUG ===================
    window.teamChatReal = {
        connection: connection,
        currentUser: currentUserName,
        selectedUser: () => selectedUser,
        connectedUsers: () => connectedUsers,
        conversationHistory: () => conversationHistory,
        teamMembers: teamMembersFromServer
    };

    console.log("🎯 Team Chat avec vrais utilisateurs initialisé!");
    console.log("👥 Membres d'équipe depuis la base de données:", teamMembersFromServer);
</script>

@section Scripts {
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
}